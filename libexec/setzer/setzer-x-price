#!/usr/bin/env bash
set -e
src=$1
pair=${2/:/}

if [[ ${#2} -eq 6 ]]; then
  base=${pair:0:3}
  quote=${pair:3:6}
else
  base=${2%:*}
  quote=${2#*:}
fi

case $src in
  binance) {
    json=$(curl -sS "https://www.binance.com/api/v3/ticker/price?symbol=${base^^}${quote^^}")
    setzer --format "$(jshon <<<"$json" -e price -u)"
  };;
  bitfinex) {
    json=$(curl -sS "https://api.bitfinex.com/v2/ticker/t${base^^}${quote^^}")
    setzer --format "$(jshon <<<"$json" -e 6)"
  };;
  bitstamp) {
    json=$(curl -sS "https://www.bitstamp.net/api/v2/ticker/${base,,}${quote,,}/")
    setzer --format "$(jshon <<<"$json" -e last -u)"
  };;
  bittrex) {
    json=$(curl -sS "https://api.bittrex.com/api/v1.1/public/getticker?market=${quote^^}-${base^^}")
    setzer --format "$(jshon <<<"$json" -e result -e Last -u)"
  };;
  cmc) {
    ticker=$(case "${pair^^}" in
      USDTUSD) { echo "825";  };;
      POLYUSD) { echo "2496"; };;
    esac)
    json=$(curl -sS -H "X-CMC_PRO_API_KEY:  $CMC_API_KEY" -H "Accept: application/json" -d  "id=$ticker" -G https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest)
    setzer --format "$(jshon <<<"$json" -e data -e "$ticker" -e quote -e USD -e price -u)"
  };;
  coinbase) {
    json=$(curl -sS "https://api.pro.coinbase.com/products/${base^^}-${quote^^}/ticker")
    setzer --format "$(jshon <<<"$json" -e price -u)"
  };;
  cryptocompare) {
    json=$(curl -sS "https://min-api.cryptocompare.com/data/price?fsym=${base^^}&tsyms=${quote^^}")
    setzer --format "$(jshon <<<"$json" -e "${quote^^}" -u)"
  };;
  ddex) {
    json=$(curl -sS "https://api.ddex.io/v4/markets/${base^^}-${quote^^}")
    setzer --format "$(jshon <<<"$json" -e data -e market -e lastPrice -u)"
  };;
  fx) {
    json=$(curl -sS "https://api.exchangeratesapi.io/latest?base=${base^^}")
    setzer --format "$(jshon <<<"$json" -e rates -e "${quote^^}" -u)"
  };;
  gateio) {
    json=$(curl -sS "https://fx-api.gateio.ws/api/v4/futures/tickers?contract=${base^^}_${quote^^}")
    setzer --format "$(jshon <<<"$json" -e 0 -e last -u)"
  };;
  gemini) {
    json=$(curl -sS "https://api.gemini.com/v1/pubticker/${base,,}${quote,,}")
    setzer --format "$(jshon <<<"$json" -e last -u)"
  };;
  hitbtc) {
    json=$(curl -sS "https://api.hitbtc.com/api/2/public/ticker/${base^^}${quote^^}/")
    setzer --format "$(jshon <<<"$json" -e last -u)"
  };;
  huobi) {
    json=$(curl -sS "https://api.huobi.pro/market/detail/merged?symbol=${base,,}${quote,,}")
    setzer --format "$(jshon <<<"$json" -e tick -e bid -e 0)"
  };;
  kraken) {
    json=$(curl -sS "https://api.kraken.com/0/public/Ticker?pair=${base^^}${quote^^}")
    setzer --format "$(jshon <<<"$json" -e result -e "${base^^}${quote^^}" -e c -e 0 -u)"
  };;
  kyber) {
    json=$(curl -sS "https://api.kyber.network/buy_rate?id=${2}&qty=1")
    setzer --format "$(jshon <<<"$json" -e data -e 0 -e src_qty -e 0 -u)"
  };;
  okex) {
    json=$(curl -sS "https://www.okex.com/api/spot/v3/instruments/${base^^}-${quote^^}/ticker")
    setzer --format "$(jshon <<<"$json" -e last -u)"
  };;
  poloniex) {
    json=$(curl -sS "https://poloniex.com/public?command=returnTicker")
    setzer --format "$(jshon <<<"$json" -e "${quote^^}"_"${base^^}" -e last -u)"
  };;
  upbit) {
    json=$(curl -sS "https://api.upbit.com/v1/ticker?markets=${quote^^}-${base^^}")
    setzer --format "$(jshon <<<"$json" -e 0 -e trade_price)"
  };;
  uniswap_v2) {
    json=$(curl -sS "https://price.monolithos.pro/uniswap/v2/price?first_token=${quote^^}&second_token=${base^^}&with_decimals=true&round=10")
    setzer --format "$(jshon <<<"$json" -e result | bc)"
    # echo "$(jshon <<<"$json" -e result)" | bc
  };;
  exmo) {
    json=$(curl -sS 'https://api.exmo.com/v1.1/ticker')
    amount=$(jshon <<<"$json" -e "${base^^}_${quote^^}" -e avg)
    setzer --format "${amount//'"'}"
  };;
  exchangeratesapi) {
    json=$(curl -sS "https://api.exchangeratesapi.io/latest?base=${base^^}")
    setzer --format "$(jshon <<<"$json" -e rates -e "${quote^^}")"
  };;
  cbr) {
    json=$(curl -sS "https://www.cbr-xml-daily.ru/daily_json.js")
    setzer --format "$(jshon <<<"$json" -e Valute -e "${base^^}" -e Value)"
  };;
  ratesapi) {
    json=$(curl -sS "https://api.ratesapi.io/api/latest?base=${base^^}&symbols=${quote^^}&rtype=fpy")
    setzer --format "$(jshon <<<"$json" -e rates -e "${quote^^}")"
  };;
  *) {
    echo >&2 "Error: exchange not recognised: $src"
  };;
esac
